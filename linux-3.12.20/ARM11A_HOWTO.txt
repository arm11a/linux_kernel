1. 우분투에서 zImage 만드는 방법

    sudo apt-get install gcc-arm-linux-gnueabihf
    export ARCH=arm
    export CROSS_COMPILE=arm-linux-gnueabihf-
    make ARCH=arm exynos_defconfig
       - You can see .config file.
    make ARCH=arm menuconfig
       - System Type -> Enter
       - SAMSUNG EXYNOS SoCs Support -> Enter
       - [*]SAMSUNG EXYNOS5 -> Select using spacebar
       - [ ]SAMSUNG EXYNOS4 -> Deselect
       - Save & Exit
    make -j5

    Then, you can find zImage file in arch/arm/boot directory.


2. How to find magic number in zImage ?

    There are two ways to extract hexa codes from a file.

    (1) hexdump arch/arm/boot/zImage | head -n3
    (2) arm-linux-gnueabihf-objdump -EL -b binary -D -m arm arch/arm/boot/zImage | head -n 20


3. zImage 를 만들기 전의 ELF 파일인 vmlinux 파일에서 section header 레이아웃 확인

    arm-linux-gnueabihf-readelf -S vmlinux

		There are 22 section headers, starting at offset 0x2b1c00:

		Section Headers:
		  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
		  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
		  [ 1] .text             PROGBITS        00000000 008000 005b54 00  AX  0   0 32
		  [ 2] .rodata           PROGBITS        00005b54 00db54 000d20 00   A  0   0  4
		  [ 3] .piggydata        PROGBITS        00006874 00e874 28d5e5 00   A  0   0  1
		  [ 4] .got.plt          PROGBITS        00293e5c 29be5c 00000c 04  WA  0   0  4
		  [ 5] .got              PROGBITS        00293e68 29be68 000030 00  WA  0   0  4
		  [ 6] .pad              PROGBITS        00293e98 29be98 000008 00  WA  0   0  1
		  [ 7] .bss              NOBITS          00293ea0 29bea0 000024 00  WA  0   0  4
		  [ 8] .stack            NOBITS          00293ec8 29bea0 001000 00  WA  0   0  1
		  [ 9] .comment          PROGBITS        00000000 29bea0 00002a 01  MS  0   0  1
		  [10] .ARM.attributes   ARM_ATTRIBUTES  00000000 29beca 00002f 00      0   0  1
		  [11] .debug_line       PROGBITS        00000000 29bef9 0025ba 00      0   0  1
		  [12] .debug_info       PROGBITS        00000000 29e4b3 0074c4 00      0   0  1
		  [13] .debug_abbrev     PROGBITS        00000000 2a5977 00141d 00      0   0  1
		  [14] .debug_aranges    PROGBITS        00000000 2a6d98 000188 00      0   0  8
		  [15] .debug_ranges     PROGBITS        00000000 2a6f20 001310 00      0   0  8
		  [16] .debug_frame      PROGBITS        00000000 2a8230 0009bc 00      0   0  4
		  [17] .debug_loc        PROGBITS        00000000 2a8bec 007d42 00      0   0  1
		  [18] .debug_str        PROGBITS        00000000 2b092e 001200 01  MS  0   0  1
		  [19] .shstrtab         STRTAB          00000000 2b1b2e 0000d2 00      0   0  1
		  [20] .symtab           SYMTAB          00000000 2b1f70 001400 10     21 213  4
		  [21] .strtab           STRTAB          00000000 2b3370 000b5f 00      0   0  1
		Key to Flags:
		  W (write), A (alloc), X (execute), M (merge), S (strings)
		  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
		  O (extra OS processing required) o (OS specific), p (processor specific)


		dplee@dplee-VirtualBox:~/work/linux_kernel/linux-3.12.20$ arm-linux-gnueabihf-readelf -S vmlinux | head -n 20
		There are 40 section headers, starting at offset 0x36b775c:

		Section Headers:
		  [Nr] Name              Type            Addr     Off    Size   ES Flg Lk Inf Al
		  [ 0]                   NULL            00000000 000000 000000 00      0   0  0
		  [ 1] .head.text        PROGBITS        c0008000 008000 0001c0 00  AX  0   0  4
		  [ 2] .text             PROGBITS        c00081c0 0081c0 36125c 00  AX  0   0 64
		  [ 3] .rodata           PROGBITS        c036a000 36a000 0e7c68 00   A  0   0 64
		  [ 4] __bug_table       PROGBITS        c0451c68 451c68 005d24 00   A  0   0  1
		  [ 5] __ksymtab         PROGBITS        c045798c 45798c 0061c8 00   A  0   0  4
		  [ 6] __ksymtab_gpl     PROGBITS        c045db54 45db54 003808 00   A  0   0  4
		  [ 7] __ksymtab_strings PROGBITS        c046135c 46135c 0159b9 00   A  0   0  1
		  [ 8] __param           PROGBITS        c0476d18 476d18 000790 00   A  0   0  4
		  [ 9] __modver          PROGBITS        c04774a8 4774a8 000b58 00   A  0   0  4
		  [10] __ex_table        PROGBITS        c0478000 478000 000ff8 00   A  0   0  8
		  [11] .ARM.unwind_idx   ARM_EXIDX       c0478ff8 478ff8 01aaf8 00  AL 16   0  4
		  [12] .ARM.unwind_tab   PROGBITS        c0493af0 493af0 003ff0 00   A  0   0  4
		  [13] .notes            NOTE            c0497ae0 497ae0 000024 00  AX  0   0  4
		  [14] .vectors          PROGBITS        00000000 498000 000020 00  AX  0   0  4
		  [15] .stubs            PROGBITS        00001000 499000 000240 00  AX  0   0 32


4. vmlinux 에서 zImage 를 만들 때는 .comment, symbol, relocation 정보를 
   모두 제거한 후 아래의 5 개 section 만 남는다.

    .text, .rodata, .piggydata, .got, .pad


5. System.map 파일과 linux-3.12.20 디렉토리 에 있는 vmlix 파일의 objdump 를
   비교하면 section 들의 주소값을 알 수 있다.


6. Kernel Image (make 시 V=1 로 하면 빌드 과정을 Detail 하게 볼 수 있음)
   설명 최고 url : http://blee74.tistory.com/entry/11

          objcopy          gzip               as            ld            objcopy
   vmlinux ------>  Image -------> piggy.gz -----> piggy.o ----> vmlinux --------> zImage
    (1)              (2)             (3)            (4)            (5)              (6)

    (1) vmlinux  : Raw kernel excutable (ELF Object)          
                 : linux_kernel/linux-3.12.20

    (2) Image    : Stripped kernel binary (binary object)      
                 : (1) 의 vmlinux 파일에서 .comment, symbol, relocation 제거한 파일 
                 : linux_kernel/linux-3.12.20/arch/arm/boot

    (3) piggy.gz : Compressed kernel binary
                 : Image 파일을 gzip 으로 압축한 것.

    (4) piggy.o  : piggy.gz 을 데이터로 포함하고 있는 giggy.gzip.S 를
                   컴파일하여 piggy.o 파일 생성 

    (5) vmlinux  : Composite kernel image (ELF Object)         
                 : piggy.o + head.o + misc.o
                 : linux_kernel/linux-3.12.20/arch/arm/boot/compressed

    (6) zImage   : Kernel image for bootloader (binary object) 
                 : (5) 의 vmlinux 파일에서 .comment, symbol, relocation 제거 후
                   objcopy 로 zImage 생성 
                 : linux_kernel/linux-3.12.20/arch/arm/boot

    +---------------------+----------------------------------+-----------+
    | compressed kernel   |  압축해제코드 (head.o, misc.o)   |  text     | 
    |     (zImage)        +----------------------------------+-----------+
    |                     |  압축된 커널이미지 (piggy.gz)    | piggydata |
    |                     +----------------------------------+-----------+
    |                     |  초기 데이터 (head.o, misc.o)    | got, data |
    +---------------------+----------------------------------+-----------+
